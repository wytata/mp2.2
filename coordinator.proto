syntax = "proto3";
package csce438;
import "google/protobuf/timestamp.proto";

// ------------------------------------------------------------
// The coordinator service definition
// These are the different functionalities exposed by service
// ------------------------------------------------------------

//Init and Heartbeat potentially redundant
service CoordService{
    rpc Heartbeat (ServerInfo) returns (Confirmation) {}
    rpc GetServer (ID) returns (ServerInfo) {}
    /* // ZooKeeper API here */
    /* // Create a path and place data in the znode */
    /* rpc create (PathAndData) returns (Status) {} */
    /* // Check if a path exists (checking if a Master is elected */
    /* rpc exists (Path) returns (Status) {} */

    rpc GetAllFollowerServers (ID) returns (ServerList) {}
    rpc GetFollowerServer (ID) returns (ServerInfo) {}

}

//server info message definition
message ServerInfo{
    int32 serverID = 1;
    string hostname = 2;
    string port = 3;
    string type = 4;
}
// TODO: check which extra stuff in the coordinator.proto you dont need

//confirmation message definition
message Confirmation{
    bool status = 1;
}

//id message definition
message ID{
    int32 id = 1;
}


//two repeated string lists of each entry in a users 
//Timeline (TL) and Follower List (FL)
// TLFL definition
message TLFL{
    bool status = 1;
    repeated string TL = 2; 
    repeated string FL = 3; 
}


//list of all users known of by given follower synchronizer
// AllUsers definition
message AllUsers{
    repeated string users = 1; 
}


// ServerList definition
message ServerList{
    repeated int32 serverID = 1;
    repeated string hostname = 2;
    repeated string port = 3;
    repeated string type = 4;
}


//TODO:
//potentially add a wake up synchronization rpc to be made from
//coordinator when it detects a server reconnects after being off
// SynchService definition
service SynchService{
    rpc GetAllUsers(Confirmation) returns (AllUsers) {}
    rpc GetTLFL(ID) returns (TLFL) {}
    rpc ResynchServer(ServerInfo) returns (Confirmation) {}

}


/* // PathAndData definition for rpc create */
/* message PathAndData{ */
/*     string path = 1; */
/*     string data = 2; */
/* } */

/* // path definition for rpc exists */
/* message Path{ */
/*     string path = 1; */
/* } */

/* // status definition for rpc exists and create */
/* message Status{ */
/*     bool status = 1; */
/* } */


